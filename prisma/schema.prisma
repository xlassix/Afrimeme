// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model files {
  fileId           String       @id
  title            String
  shortDescription String
  summary          String       @db.Text
  tags             String
  type             String
  url              String
  updatedAt        DateTime     @updatedAt
  createdAt        DateTime     @default(now())
  downloadCount    Int          @default(0)
  creator          String       @default("0xd79361b5e34066d723782553780dfd4aa23860b7")
  likedBy          LikedFiles[]
  CommentsBy       Comments[]
  Account          Account?     @relation(fields: [creator], references: [address])

  @@index(creator)
  @@fulltext([title, tags, summary])
}

model Account {
  address            String       @id
  joinedAt           DateTime     @default(now())
  lastSeen           DateTime
  avatar             String?      @default("https://gateway.lighthouse.storage/ipfs/QmNYrSm4fYE7M9SDj25XGAzydRYxJgMZ3ZTckgjz1EGv8p")
  email              String?
  username           String?
  twitter            String?
  instagram          String?
  tiktok             String?
  profileDescription String?
  name               String?
  authMethod         String?
  smartWallet        String?
  uploadedMemes      files[]
  likedFiles         LikedFiles[]
  commentedFiles     Comments[]
}

model Comments {
  id             String   @id @default(cuid())
  message        String   @db.Text
  accountAddress String
  updatedAt      DateTime @updatedAt
  Account        Account  @relation(fields: [accountAddress], references: [address])
  files          files    @relation(fields: [filesFileId], references: [fileId])
  filesFileId    String
}

model LikedFiles {
  id             String   @id @default(cuid())
  isLiked        Boolean  @default(true)
  accountAddress String
  updatedAt      DateTime @updatedAt
  Account        Account  @relation(fields: [accountAddress], references: [address])
  files          files?   @relation(fields: [filesFileId], references: [fileId])
  filesFileId    String?

  @@unique([accountAddress, filesFileId])
}
